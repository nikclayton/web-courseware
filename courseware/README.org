#+TITLE: Powercoders Courseware
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css">
#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=Roboto|Roboto+Mono|Roboto+Slab" rel="stylesheet">

* Overview

This is the courseware for the Powercoders Frontend course.

If you're reading the HTML version of this file you can find the
Org source in [[https://bitbucket.org/hussamallaham/004.powercoders/src/master/courseware/README.org][courseware/README.org]].

* Initial setup

If this is your first time editing and building the courseware you will need to install some software on your computer and download the courseware.

** Install git and clone the repository

The courseware is in the
[[https://bitbucket.org/hussamallaham/004.powercoders/src/master/]] repository. Ask Hussam for access if you don't already have it.

Install =git= from https://git-scm.org.

The bitbucket.org link above has instructions for cloning a local copy of the repository to your computer. Do that. In the instuctions that follow the directory that you cloned the repository too (i.e., the directory that contains the =courseware/= directory) is referred to as =$REPO=.

** Install software to convert the courseware to HTML

There are two approaches to managing the courseware, the software you need depends on the approach you use.

*** Approach 1: Docker container pre-loaded with relevant software

This approach is best for instructors who are not very familiar with Emacs and/or managing and building sofftware on their machines. It uses a Docker image configured with all the necessary software used to convert the courseware to HTML slides and gets you up and running very quickly.

To use this.

1. Install Docker (Community Edition) on your computer from https://docs.docker.com/install/.

2. Launch the Docker Quickstart terminal that should have been installed.

3. Change to the repository directory ($REPO). Verify there is a =docker/= subdirectory present.

4. Build a local copy of the Docker image by running

#+begin_src shell
docker build --tag=powercoders docker
#+end_src

This will prepare the image, downloading and installing software in to the image, and may take 10-15 minutes to complete depending on the speed of your Internet connection.

You only need to do this step once.

You can verify that the container built correctly by launching a shell in the contaner by running

#+begin_src shell
docker run -it powercoders sh
#+end_src

You can exit the running shell by running =exit=.

*** Approach 2: Locally installed software

If you're comfortable using Emacs and other locally installed software then this approach is probably better for you. Install the following applications if they are not already installed.

**** Emacs

https://www.gnu.org/software/emacs/download.html

For Windows download the 64 bit version with all dependencies

**** Google Chrome

https://google.com/chrome

The open source Chromium browser (https://www.chromium.org) can also be used.

**** Graphviz

http://graphviz.org/download/

Update the =PATH= variable to contain the full path to the Graphviz
=bin= directory.

This has worked if you can run the =dot= command from anywhere on
your system.


** Make sure everything works

The commands to build the content vary depending on whether you are using Docker to build the content or using locally installed software.

*** Approach 1: Using Docker

1. Launch the Docker Quickstart terminal.

2. Run the following command, adjusting =$REPO= as necessary.

  #+begin_src shell
  docker run -it \
    --mount type=bind,source="$REPO",target=/repo \
    powercoders \
    sh -c "emacs -Q -L $REPO/courseware -l poco-org-export --batch $REPO/week1/day1.org -f org-re-reveal-export-to-html"
  #+end_src

  This command runs the Docker image making the courseware repository accessible to the image under the =/repo= path. Then it runs Emacs in batch mode to convert the Org file to an HTML presentation, writing the result back to the same directory as the orginal Org file.

3. After a few moments the prompt should return, and =$REPO/week1/day1.html= should have been created, along with the associated images for the presentation.

4. Load =$REPO/week1/day1.html= into your browser and verify it looks
   correct.

*** Approach 2: Locally installed software

Edit =courseware/poco-config.el= and change the definitions for the entries:

- =poco/repo-root=
  - Full path to the checked out repository (i.e., the path to the
    =004.powercoders= directory, including the =004.powercoders=
    directory).
- =poco/export-root=
  - Full path to the directory where exported HTML files will be
    saved.
- =poco/chrome-path=
  - Path to Google Chrome

to reflect the correct paths for your system. If you use backslash
(=\=) in paths then they must be entered twice. It's easier to use
forward slashes, which are valid even on Windows systems.

In the examples that follow, replace =$REPO= with the full path
to the repository that you checked out.

**** Linux / Mac

 #+BEGIN_SRC
 % cd $REPO
 % /path/to/emacs -Q --batch \
   courseware/week1/day1.org \
   -L $REPO/courseware \
   -l poco-org-export \
   -f org-re-reveal-export-to-html
 #+END_SRC

**** Windows

 #+BEGIN_SRC
 % cd $REPO
 % path\to\emacs.exe -Q --batch \
   courseware\week1\day1.org \
   -L $REPO\courseware \
   -l poco-org-export
   -f org-re-reveal-export-to-html
 #+END_SRC


This should have created =courseware/week1/day1.html=. Load this in to
your browser and verify that everything works.

* Content and structure

Previous versions of the course have -- as far as I can tell --
generally taken the approach of provding blocks of material in
significant chunks, and then moving on to a different block when
the previous topic has been exhausted.

With this course I've tried to introduce new material as soon
as it would be useful for the students to use it.

For example, in previous versions of the course, version control
with Git was not introduced until around week 6. In this course
I introduce it in the first week, so that that the students can
integrate version control in to their habits as soon as possible.

There are two additional significant changes to the previous material.

1. Exercises come much more frequently. I'm aiming for no more than
  25-30 minutes elapsing before the students are trying something out
  on their computers, sometimes a lot less time.

2. Explicitly providing space for the students to deliberately "break"
  something, and see what that looks like -- mis-spellings, ommitting
  quotes, incorrect closing tags, things like that. So they can learn
  what this looks like and recognise it in the future when they
  inevitably make these mistakes.

* Material to date

The files:

- =week1/day1.org=
- =week1/day2.org=
- =week1/day3.org=
- =week1/day4.org=
- =week1/day5.org=

and

- =week2/day1.org=

contain approximately 4 weeks worth of material. I had originally
expected the progress to match the week/day filenames, but I was
over-optimistic in estimating how rapidly we would progress through
the content.

This is fine, as we're roughly on par with the pace of previous
courses.

The contents of =week2/shopping= are several weeks worth of project
and exercises where we will build frontend application from the
ground up, applying the material that has been covered in the previous
weeks.

The material for the second half of the course will be written during
December '18 / January 19, and will be based on the requirements of
the companies offering internships.

* Technical instructions for authors / editors

The courseware is written in Org, as implemented in Emacs' Org Mode.

Roughly, each slide corresponds to a different heading in the file,
and the content of the section is the content of the slide.

** Rationale

I wanted an authoring environment that:

- Prioritised keyboard over mouse for authoring content
- Supported automatically generating content
  - E.g., screenshots from HTML shown on the slides
- Supported including content from other sources
  - E.g., live snippets of source code
- Was amenable to version control
- Was not propriatory to one vendor
- Had multiple export options



** Local modifications

*** Work on a branch

Create a branch to work on for your course. For example:

#+BEGIN_SRC shell
git checkout -b 005-istanbul
#+END_SRC

*** Emacs configuration

If you will be using Emacs to edit the content (recommended) then edit your =.emacs= file and add the following (replace =$REPO= with the correct path):

#+begin_src emacs-lisp
(add-to-list 'load-path "$REPO/courseware")
(require 'poco-org-export)
#+end_src

*** Change settings in =courseware/include/settings.org=

Edit =include/settings.org=.

Line 1: Change to the path to the checked-out =reveal-js= directory
on your system.

Line 8 (=REVEAL_SLIDE_HEADER=): Update for your course as appropriate.

Lines 21 and 22 (=AUTHOR= and =EMAIL=): Update to refer to yourself.


** Structure of a slide

*** Org basics

If you're familiar with Org you can skip this section.

An Org file is a plain text file with embedded markup. It's similar to Markdown, although predating that format by approximately a year.

An Org file is composed of sections delimited by headings. A heading is indicated by a line that starts with one or more =*= characters -- one =*= denotes a level 1 heading, =**= is a level two heading, and so on.

Other markup of note:

- Bulleted lists start with a =-= and a space (indent the line to get lists inside lists)
- Inline bolding is achieved by wrapping with asterisks =*like this*=.
- Inline code formatting is achieved by wrapping with equal signs ~=like this=~.
- Special blocks are delimited by =#+begin_...= and =#+end...= (see more later).

*** General structure

Each slide is a seperate Org heading (delimited by one or more =*=
characters starting at the first column of the file).

The slide's title is the heading text.

The content of the slide is the content of the section. Generally this
is a bulleted list.

The slides are organised in a hierarchy (level 1 headings, level 2 headings, etc). I normally use this so that I can easily hide all the slides at a particular level when I'm focusing on the content and the structure while editing -- the hierarchy level does not impact the display of the slides when presenting.

When editing the slides in Emacs you can put the cursor on a heading and press the =TAB= key to hide or show all the slides under that heading. Repeatedly pressing =TAB= will cycle through different visibilities.

*** Speaker notes

Content for speaker notes is included in

#+BEGIN_EXAMPLE
#+BEGIN_NOTES
... notes go here ...
#+END_NOTES
#+END_EXAMPLE

blocks in each section. This is not rendered in the slides, but is
included when the HTML for the speaker notes is generated.

*** Language blocks

To show source code in a particular language use a =SRC= block and
identify the language.

#+BEGIN_EXAMPLE
#+BEGIN_SRC html
<p>A paragraph</p>
#+END_SRC
#+END_EXAMPLE

This will render as a syntax-highlighted block in the slide, with
a badge at the top-right corner of the block showing the language.

Valid values for the language tag include:

- =html=
- =css=
- =javascript=
- =shell= (not technically a language)

*** Graphviz blocks

You can describe graphs using the [[http://graphviz.org/][Graphviz]] language. If you have
the tools installed these will be converted to a =.svg= file when
the slide is exported and included in the presentation.

The syntax looks like:

#+BEGIN_EXAMPLE
#+BEGIN_SRC dot :file dependency-1.svg :cmdline -Tsvg -Gstylesheet=../graphviz.css
digraph G {
  A -> B -> C;
  B-> D;
}
#+END_SRC
#+END_EXAMPLE

and produces this result:

#+BEGIN_SRC dot :file dependency-1.png :cmdline -Tpng -Gstylesheet=graphviz.css
digraph G {
  A -> B -> C;
  B -> D;
}
#+END_SRC

#+RESULTS:
[[file:dependency-1.png]]

The additional settings on the =#+BEGIN_SRC= line are:

- =:file= -- name of the file to generate
- =:cmdline= -- additional parameters to pass to the Graphviz
  command line tools

In this example the output type (=T=) is set to SVG, and a
particular stylesheet is embedded in the SVG file.

To tell Emacs to evaluate this graph and create the SVG file
place the cursor somewhere within the block and press =C-c C-c=.
In a few moments the SVG file should be created and included in
the file.

If you make a change to the graph code just press =C-c C-c= again
to regenerate the image.

*** =html-chrome= blocks

The slides need to show a lot of HTML, and then show screenshots
of what that HTML looks like when loaded in to the browser.

In order to automate this process I wrote some code that:

- Saves the HTML from the slide and saves it to a temporary file
- Runs Chrome in "headless" mode, load the file, and make a virtual
  "screenshot" of the result
- Save the screenshot to a PNG file
- Insert the PNG file in to the presentation

The practical upshot of this is that you can type example HTML into
the slide and automatically generate a screesnhot of the rendered
result.

To do that, use a =SRC= block with the language set to =html-chrome=.
For example:

#+BEGIN_EXAMPLE
#+NAME: html-test
#+BEGIN_SRC html-chrome
<p>A paragraph</p>
#+END_SRC
#+END_EXAMPLE

Note the preceding =#+NAME: ...= line. The generated PNG file will
have this as the basename -- so in this example the generated PNG file
will be called =html-test.png=.

*** Two column slides

There's basic support for creating slides with two columns. To do
that, wrap the content you want to appear in the left column in

#+BEGIN_EXAMPLE
#+REVEAL_HTML: <div class="left">
... slide content goes here ...
#+REVEAL_HTML: </div>
#+END_EXAMPLE

and wrap the content you want to appear in the right column in

#+BEGIN_EXAMPLE
#+REVEAL_HTML: <div class="right">
... slide content goes here ...
#+REVEAL_HTML: </div>
#+END_EXAMPLE

It would be possible to create more complex slide layouts using
CSS (e.g., =flex= or =grid= layouts) but I haven't found it
necessary so far.

** Template shortcuts

If you configure your =.emacs= and load =poco-org-edit=, like so:

#+begin_src emacs-lisp
(add-to-list 'load-path "$REPO/courseware")
(require 'poco-org-edit)
#+end_src

Some template shortcuts will be enabled in in Emacs.

To activate the template type a =<=, the name of the shortcut, and
press =TAB=. The shortcut will be replaced with the template.

The current shortcuts are:

*** =css=

Inserts:

#+begin_example
#+begin_src css

#+end_src
#+end_example

*** =d=

Inserts:

#+begin_example
#+begin_src dot :file .svg :cmdline -Tcsv -Gstylesheet=../graphviv.css
digraph G {

}
#+end_src
#+end_example

You will be promped for the name of the file to insert.

*** =e=

Inserts:

: #+begin_example
:
: #+end_example

*** =h=

Inserts:

#+begin_example
#+begin_src html

#+end_src
#+end_example

*** =j=

Inserts:

#+begin_example
#+begin_src javascript

#+end_src
#+end_example

*** =left=

Inserts:

#+begin_example
#+reveal_html <div class="leftcol">

#+reveal_html </div>
#+end_example

*** =right=

Inserts:

#+begin_example
#+reveal_html <div class="rightcol">

#+reveal_html </div>
#+end_example

** Visual concerns

The slides are written assuming they will projected on an HD (1920x1080)
display. Image dimensions, the number of lines of text on each slide, etc
are based on that.

** Editing content, generating the slides, speaker notes, etc.

*** Configuring Emacs

The =poco-org-export.el= file in the repository configures Emacs to load
all the necessary packages and configures them appropriately. This must be loaded. As described earlier, you can load =poco-org-edit= instead (which loads =poco-org-export=) to enable editing shortcuts.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
  "/full/path/to/repo/courseware")
(require 'poco-org-edit)
#+END_SRC

Evaluate that (or restart Emacs) and everything should work.

*** Interactively generating slides

Open one of the =.org= files corresponding to a day, week, or
topic.

Then run =C-c C-e v v= to run the =org-re-reveal= export process.
This will write a RevealJS presentation to the same directory
as the =.org= file. Any graphics or screenshots needed by
the presentation will be generated automatically.

*** Interactively generating a one-pager

Open one of the =.org= files corresponding to a day, week, or
topic.

Then run =C-c C-e h h= to export a single HTML file that
contains the whole content suitable for giving out or sharing
as lecture notes.

*** Batch generation of output files

#+BEGIN_SRC
% emacs -Q --batch \
  path/to/file.org \
  -L /path/to/courseware
  -l poco-org-export \
  -f org-re-reveal-export-to-html
#+END_SRC

- =-Q= -- disables loading Emacs' normal startup configuration
- =--batch= -- run Emacs in batch mode, no UI
- =/path/to/file.org= -- path to the file that contains the content
  you want to convert to slides
- =-L /path/to/courseware= -- path to the =courseware= directory
- =-l poco-org-export= -- file with export code
- =-f org-re-reveal-export-to-html= -- run the function that generates
  the HTML

** Presenting

Once the slides have been generated you can view them in the browser
and present them

*** Viewing in the browser

Load the generated HTML in to a Chrome tab. The slides are a [[https://revealjs.com/#/][Reveal JS]]
presentation. To move between them:

- =SPACE= or =n= -- advance to the next slide
- =p= -- go back to the previous slide
- =b= -- blank the screen (press =b= again to
- =s= -- pop up a new window containing the speaker notes

The slides have a hierarchy, visible if you press =Esc=. The hierarchy
is based on the level hierarchy in the original =.org= file.

You can move across levels in the hierarchy by pressing the right arrow
key. I don't actually use this in the class, I mention it just so you
know what's happened if you inadvertently press the right arrow key.

*** Presenting in class

In class we have a projector with a Chromecast attached to its HDMI
port. The presentor laptop, the Chromecast, and all the student
laptops are connected to the same Wi-Fi network.

Running Google Chrome, this allows you to load the generated HTML for
the presentation in to a tab, and then "cast" the contents of the tab.

Once the presentation is loaded you can then press =s= to load the
speaker notes. These will display on the laptop, but will not be shown
via the Chromecast, because they appear in a separate window.

If you need to demonstrate other programs (e.g., a shell) or show
something that Chrome does not consider to be part of the web page,
such as the browser inspector UI, you will need to switch from casting
the tab to castng your entire desktop. Use the Cast UI to do this.

** Additional features

Various Emacs and =org-mode= features are used to make editing the
content easier and ensuring it is consistent.

*** Common settings

Common settings for the slides are stored in the =include/settings.org=
file and included using Org's =#+SETUPFILE= directive (see the top
of each file for more).

*** TODO =TOPIC= and =REQUIREMENTS= properties

*Note:* This is partly aspirational, as I'm still working on adding
this information through the course material.

Each heading contains optional =TOPIC= and =REQUIREMENTS= properties.

These are used to try and ensure that all the necessary material
is covered, and material is not introduced without first
covering any required material first.

The =TOPIC= property for a heading is a keyword that describes the
topic that is covered in this slide.

The =REQUIREMENTS= property for a heading is a space-separated list
of values used in =TOPIC=s

I'm in the process of writing code that validates that each slide's
list of =REQUIREMENTS= is met by at least one prior slide that lists
it as a =TOPIC=.
