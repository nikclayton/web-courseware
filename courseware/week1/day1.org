#+Title: Powercoders Basel Coursework, Day 1
#+INCLUDE: "../include/settings.org"
#+PROPERTY: header-args:html-chrome :flags --window-size=320,240 --force-device-scale-factor=2 :cache yes

#+BEGIN_NOTES

This is a special week -- no guest trainers so that I can get them up to
speed and spend more time with them to see who struggles, get a better feel
for the class, etc.

#+BEGIN_SRC python
python -m http.server 8080
#+END_SRC

#+END_NOTES

* Welcome

- Course agreement and expectations
- Asking questions is absolutely fine

- Tell me if I need to speak more slowly

#+BEGIN_QUOTE
"All teaching is the process of lying, and then replacing the lies
 with successively better approximations of the truth."
#+END_QUOTE

* TODO Goals for this week

- Get everyone on the same page
- Introductions to:
  - HTML
  - Version control
  - Cascading Stylesheets (CSS)
- Understanding online documentation

* TODO Goals for today

- Introductions
- Logistics and setup
- Using the command line
- Playing with HTML
- Making mistakes and fixing them
- Reading documentation

* Introductions

#+BEGIN_NOTES
Lets do a quick go around the class.

Names, where you're from, ...

#+END_NOTES

* Logistics

- Wifi
- Bathrooms
- Schedule and breaks
  - 9am - midday: Teaching, w/ 3 x 10 minute breaks
  - midday - 1.30pm: Lunch
  - 1.30pm - 5pm: Teaching, w/ 3 x 10 minute breaks

#+BEGIN_NOTES

... speaker notes go here ...
   
#+END_NOTES

* Tech setup

- Laptops have all necessary software installed
- Slack accounts created

** Slack

- *Our main communication tool*
- Like WhatsApp, but multiple channels around =#topics=
  - =#bsl= - The channel for everyone involved in this class
    - Announcements from teachers, coaches, mentors
    - Questions from you
    - Success stories, achievements, news
  - =#ch-resources=
    - Interesting articles, job offers, courses
  - =#ch-random=
    - Everything else
  - =@[username]=: Personal messages

** Rules for Slack

#+REVEAL_HTML: <div class="leftcol">
- Use the appropriate channel
  - If you're not sure, =#ch-random=
- Use =@[username]= in a message in a channel notifies them
- Use =@channel= in message notifies everyone in the channel
  - Only use these if you *really* need everyone to see it
- Use threads
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
[[file:slack-thread.png]]
#+REVEAL_HTML: </div>

** Installing software

- Slack (Apps: [[https://slack.com/downloads/windows][Windows]] | [[https://slack.com/downloads/osx][Mac]] | [[https://play.google.com/store/apps/details?id=com.Slack&hl=en][Android]] | [[https://itunes.apple.com/us/app/slack/id803453959?mt=12][iOS]])
- Web Browser: [[https://www.google.com/chrome/][Google Chrome]]
- Programmer's Editor: [[https://atom.io/][Atom]]
- Version Control: Git (Windows | Mac)
- IDE: WebStorm

** Atom

#+BEGIN_NOTES
Download

Windows install:
File > Settings

#+END_NOTES

** Find the keys

 #+REVEAL_HTML: <div class="leftcol">
 - ="= (double quote)
 - ='= (single quote)
 - =<= (less than, left angle)
 - =>= (greater than, right angle)
 - =!= (exclamation, bang)
 - =-= (minus, dash)
 #+REVEAL_HTML: </div>

 #+REVEAL_HTML: <div class="rightcol">
 - =#= (hash)
 - ={= (left curly)
 - =}= (right curly)
 - =/= (forward slash)
 - =_= (underscore)
 - =;= (semi-colon)
 #+REVEAL_HTML: </div>

 #+BEGIN_NOTES
[Have them check they can find all these keys on their keyboard]
 #+END_NOTES

* Common mistakes

- Not enough / too much space
- Using the wrong quotes, ='= vs ="=
- Using the wrong case
- Mis-spellings
- Number =1= vs. lowercase letter =l=

#+BEGIN_NOTES
Progamming is a precision activity. Sometimes using an upper
case letter instead of a lower case letter can cause something
to not work.

Or having the wrong amount of spaces.

Or spelling things wrong. Or using the wrong quotes.

When I was hosting the interviews, the #1 problem I saw people
make was not following the examples / instructions precisely.

This is a skill that you will need to learn.
#+END_NOTES

* Taking notes

#+BEGIN_NOTES
Before we dive in to the course material, you're going to want to
take notes.

So get ready to do that now. If you're going to be using pen and
paper have them ready.

If you're going to be typing notes in to a file on your computer
get that ready now.

If you need me to wait because you're taking a note on something
that is *absolutely fine*. Just let me know, OK.
#+END_NOTES

* Files and directories

- Information is stored in files.
- Files have names and extensions
- Extensions are a convention that indicate the file's contents

#+BEGIN_NOTES
Everything you do as a web developer is going to involve working with files,
so it's important that you have a good mental model of how they work.

A file is a collection of information. That information might be the text of
a web page, or the data that makes up an image, or an audio file, or the data
that make up anything else.

Each file has a filename. We say that the filename is made up of three parts,
which are:

- The basename
- A full-stop character. We tend to call this 'dot'.
- Generally 1-4 characters after the dot, called the 'extension'

Conventionally, the extension is used to describe the type of data that is in
the file. For example:

- .txt  -- text files
- .html -- HTML files (more on these later)
- .png  -- Portable Network Graphics (a type of image)
- .css  -- Cascading Style Sheet (also more later)
- .js   -- Javascript (much more, later)

However, this is just a convention, and it's possible for a file's extension
to *not* match its actual contents. This can cause problems, so we'll look
at that later.

#+END_NOTES

** Show extensions on Windows

#+REVEAL_HTML: <div class="leftcol">
- \faWin + =extension= -> "Show or hide file extensions"
- Find "Hide extensions for known file types"
- Make sure it is *not* selected
#+REVEAL_HTML: </div>

[[file:windows-hide-extensions.png]]

#+BEGIN_NOTES
For those of you with Windows computers we need to make a small change.

Trying to be helpful, Windows has a default configuration option that means
it won't show you a file's extension. This is incredibly unhelpful when
you're a frontend developer, so we need to turn that off now.

If you're using Windows 10 try these instructions.

Anyone not using Windows 10, let me know.

[Wait]
 #+END_NOTES

** Directories

 - Files are stored in directories (folders)
 - Like boxes. You can put a file in a box.
 - You can also put a box in a box.
 - This gives us a "nested" structure

 #+BEGIN_NOTES
 Files are placed in collections -- the modern name for these
 collections is a "folder". However, the earlier name was
 "directory". That name is in the name of lots of commands that we'll
 use, and is still very widespread, so that's the name we'll use.

 You can think of a directory as being like a box that you can put
 files in to. You can also put a directory inside another directory --
 like putting a box inside a box.

 When we do this we say that one directory is *nested* inside the
 other.

 If you imagine that you're inside one of these boxes-as-directories,
 and climb out of it, you'll find yourself in another directory. If you
 keep doing this you'll eventually find that you can't climb out any
 more -- you've reached the *root* directory.

 The root directory has a special name, '/', or 'slash' (or forward
 slash).
 #+END_NOTES

** Paths

 - Each file is in exactly one directory
 - "path" is the route to the file through all the directories it is in,
   starting from the root.
 - /.../..../... TODO(nik): Use a plausible full path here

 #+BEGIN_NOTES
 A file can only ever be in one directory at a time.

 This means that we can uniquely identify a file by starting at the
 root directory and then listing all the directories that we have to go
 through to get to file.

 We separate these directory names with a '/' slash character too.
 #+END_NOTES

** The directory tree (family tree)

#+BEGIN_SRC dot :file family-tree.png :cmdline -Tpng -Gstylesheet=../graphviz.css
  digraph G {
    graph [dpi=172 scale=2 bgcolor="#002b36"];// viewport="885 800"];
    node [style="filled" fontname="sans-serif" fontcolor="#9ee0e3" color="#eee8d5" fillcolor="#3f3f3f"];
    edge [color="#eee8d5"];
    subgraph ggp {
      rank = same;
      Walter;
      Alice;

      John;
      Beatrice;

      Arthur;
      Lillian;

      George;
      Lena;
    }

    subgraph gp {
      rank = same;
      JohnC [label=John]
      Barbara;
      JohnC -> Barbara [dir=none];

      Ralph -> Maude [dir=none];
    }

    subgraph p {
      rank = same;
      Steve;
      Liz;
      Steve -> Liz [dir=none];
    }

    Walter -> JohnC;
    Alice -> JohnC;

    John -> Barbara;
    Beatrice -> Barbara;

    Arthur -> Ralph;
    Lillian -> Ralph;

    George -> Maude;
    Lena -> Maude;

    JohnC -> Steve;
    Barbara -> Steve;

    Ralph -> Liz;
    Maude -> Liz;

    Steve -> Nik;
    Liz -> Nik;
  }
#+END_SRC

#+RESULTS:
[[file:family-tree.png]]

 #+BEGIN_NOTES
 Another way of thinking about this directory structure is as what
 computer scientists call a "tree".

 This is a bit like a family tree. There are special English terms for
 people in the tree, including

 - parent
 - grandparent
 - sibling (like a brother or sister)

 #+END_NOTES

** The directory tree

#+BEGIN_SRC dot :file tree-filesystem.svg :cmdline -Tsvg -Gstylesheet=../graphviz.css
digraph G {
  node [shape="folder"];

  home [label="Home"]
  desktop [label="Desktop"];
  documents [label="My Documents"];
  tax [label="Tax"];
  photos [label="My Photos"];
  poco [label="Powercoders"];
  basel [label="Basel"];
  coursework [label="coursework"]
  week2 [label="week2"];
  day1 [label="day1.html" shape="note"];

  img8198 [label="IMG_8198.jpg" shape="note"];
  img8199 [label="IMG_8199.jpg" shape="note"];
  img8200 [label="IMG_8200.jpg" shape="note"];

  home -> desktop;
  home -> documents;
  documents -> tax;
  home -> photos;
  photos -> img8198;
  photos -> img8199;
  photos -> img8200;
  home -> poco;
  poco -> basel;
  basel -> coursework;
  coursework -> week2;
  week2 -> day1;
}
#+END_SRC

#+RESULTS:
[[file:tree-filesystem.svg]]

 #+BEGIN_NOTES
This is a bit like that family tree, although it's been turned upside
down.

At the top of the tree is the root directory.

Below that we have various child directories.

And here we can see the file, with its filename.

We say these this (indicate slide) is the parent directory for this
directory. Which means that this, this, and this are all child directories
of it.

And these directories (indicate slide) are siblings of each other.

Computer scientists love trees. You'll be seeing stuff like this a lot.
 #+END_NOTES

** Familiar directory trees

TODO: Screenshots of directory trees in Windows Explorer, OS X Finder,
etc, to show that this isn't an alien concept for them.

#+BEGIN_NOTES
You're probably more familiar with the directory trees when it's
presented like this, but all the same features are there.
#+END_NOTES

[d3 tree code: https://bl.ocks.org/mbostock/999346]

* Introduction to the web

- Web page
 - Text file with additional markup codes
- Web browser
  - Technical term: "user agent"
  - Processes the text and codes to display the page
- Web server
  - Receives requests for page at http://.../some/file/name
  - Responds with the page
    - Or an error code

#+BEGIN_NOTES
At its heart, a web page is a file that contains text and special codes
to specify how the text should be displayed.

This file is read by a web browser; like Chrome, or Firefox, or Safari.
The browser uses the information in the text and the special codes to
generate the final page that you can interact with.

A web server is special software that the browser talks to in order to
download a web page. We'll cover that in more detail a lot later.
#+END_NOTES

** Web pages are just text

- Open https://www.powercoders.org/
- Right-click on the page
- Choose "View source" from the menu that appeara

#+BEGIN_NOTES
This is text for the Powercoders home page. There's a lot here that at
least some of you will never have seen before. But even then you can
start to make out some structure to the content.
#+END_NOTES

** Create a scratch directory

- Go to your home directory
- Create a directory called =poco=
- Change in to the =poco= directory
- Create a directory inside =poco= called =scratch=

#+BEGIN_NOTES
The =scratch= directory is where we are going to store HTML and other
files that are temporary, and you can use for experimentation. Later on
we'll create other directories for longer lived projects.
#+END_NOTES

** Create a file in Atom

- Start Atom, if necessary
- =File= > =Open Folder...=
- Navigate to, and select, the =scratch= folder
- =File= > =New File=

** Copy the following exactly

#+BEGIN_EXAMPLE
<p>This is an HTML paragraph.</p>
#+END_EXAMPLE

#+BEGIN_NOTES
[Walk through example, highlighting]

- Angle brackets
- Forward slash
- Where the spaces are

#+END_NOTES

** Save it

- =File= > =Save=
- Save it as =index.html=

** Load it in to your browser

| Windows      | Mac       |
|--------------+-----------|
| =Ctrl= + =o= | =⌘= + =o= |

** Compare the result

#+REVEAL_HTML: <div class="leftcol">
#+NAME: first-html
#+BEGIN_SRC html-chrome
  <p>This is an HTML paragraph.</p>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: first-html
[[file:first-html.png]]
#+REVEAL_HTML: </div>

* What have we just done?

- HTML (HyperText Markup Language)
- 1 element, =p=
- Start tag, content, end tag

#+BEGIN_SRC html :noweb yes
<<first-html>>
#+END_SRC

#+BEGIN_NOTES
You've just created and loaded an HTML file.

HTML is *not* a programming language, it's a markup language, and we
use it to define the structure of the web page.

An HTML file consists of one or more elements, which you use to *mark
up* different parts of the page to make it appear or behave in a
particular way.  The type of element used determines whether it's a
paragraph, or an image, or a link, or anything else that HTML
supports.

An element has three main parts.

It begins with the *start tag*. This is the name of the element
surrounded by *angle brackets*. This says where the element starts.

It ends with the *end tag*. This is like the start tag, except that
the name of the element is preceded by a *forward slash*.

In between the start tag and the end tag is the element's
*content*. In this example that's the text of the element.

Together, the start tag, content, and end tag make up the element.

For the rest of this course examples are generally going to be shown
like this. On the left hand side are line numbers, which you do not
need to type in, they are so I can talk about particular lines on
the slide.

*Important*: The line numbers might not be the same as the ones you
see in Atom.

In the main area is the actual text.

And there's a little badge off to the right to make it clear which
language we're using.

--

Based on [[https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started][MDN: Introduction to HTML]] by [[https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started$about][Mozilla Contributors]] which is
licensed under [[https://creativecommons.org/licenses/by-sa/2.5/][CC-BY-SA 2.5]].

#+END_NOTES

** TODO Nesting elements

#+NAME: nesting-elements
#+BEGIN_SRC html
<p>This is an <em>HTML</em> paragraph.</p>
#+END_SRC

- =em= element is *nested* inside the =p= element
- =em= means "emphasis", often shown as italics, as here

#+BEGIN_NOTES
Elements can be placed inside other elements. We say that they *nest*
inside each other.

For example, we can use the =em= element to make some text in the
paragraph be emphasised.

Try that -- make the change to the file in Atom, save it, and reload
the page in Chrome.
#+END_NOTES
** Nesting elements

#+REVEAL_HTML: <div class="leftcol">
#+NAME: nesting-elements-results
#+BEGIN_SRC html-chrome :noweb yes
<<nesting-elements>>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: nesting-elements-results
[[file:nesting-elements-results.png]]

#+REVEAL_HTML: </div>

#+BEGIN_NOTES
Here's what you should see.

Does everyone see this?

[Wait]
#+END_NOTES

** Elements can not overlap

#+BEGIN_EXAMPLE
<p>This is a <em>bad example.</p><em>
#+END_EXAMPLE

#+BEGIN_NOTES
Elements *must* *not* overlap. You can not close an element unless all
the elements that it contains are closed first.

If you get this wrong the browser will try and guess what you meant.
Sometimes you get lucky and everything looks OK, and sometimes you get
very strange results.
#+END_NOTES


** Keyboard shortcuts

| Action         | Windows       | Mac         |
|----------------+---------------+-------------|
| Atom, save     | =Ctrl= + =s=  | =⌘= + =s=   |
| Switch apps    | =Alt= + =Tab= | =⌘= + =Tab= |
| Chrome, reload | =Ctrl= + =r=  | =⌘= + =r=   |

#+BEGIN_NOTES
It's a good idea to get used to some keyboard shortcuts. This will
speed up your working so you don't need to take your hands from
the keyboard to the mouse and back again so frequently.

To save a file in Atom use =Ctrl= or =Command= and =s=.

Chrome will not automatically reload the file when it changes, so
you need to switch to it.

Pressing =Alt= or =Command= and =Tab= once will switch to the window
you last used. So if you went from Chrome to Atom, pressing this will
take you back to Chrome, and vice-versa.

Once you're back in Chrome, =Ctrl= or =Command= and =r= will reload
the page, allowing you to see your changes.
#+END_NOTES

** Block-level and inline elements

#+NAME: block-level-and-inline-elements
#+BEGIN_SRC html
<p><em>One</em> <em>two</em>
  <em>three</em></p>

<p>four</p> <p>five</p> <p>six</p>
#+END_SRC

#+BEGIN_NOTES
Broadly, we can put HTML elements in to two groups.

The first are called *block-level* elements. They form a new block on
the page -- there will be a blank line before and after each block
level elements.

These tend to represent large-scale structure on the page, so things
like

- headings
- paragraphs
- lists
- menus

and so on.

The second are called *inline elements*. These are always contained
inside a block-level element and normally only surround a small part
of the content.

Examples include:

- emphasis
- links

Try this example, save, and reload. But before you do that, try and
imagine what you think the result will be, and see if you get it
right.
#+END_NOTES

*** Results

#+REVEAL_HTML: <div class="leftcol">
#+NAME: block-level-and-inline-elements-results
#+BEGIN_SRC html-chrome :noweb yes
<<block-level-and-inline-elements>>
#+END_SRC

- Is this what you expected?
- Notice how the break between line 1 and 2 doesn't appear on the web
  page
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: block-level-and-inline-elements-results
[[file:block-level-and-inline-elements-results.png]]
#+REVEAL_HTML: </div>


** A more complicated example

#+NAME: a-more-complicated-example
#+BEGIN_SRC html -n
<!DOCTYPE html>
<html>
  <head>
    <title>My test page</title>
  </head>

  <body>
    <h1>This is a heading</h1>

    <p>This is a single paragraph.</p>
  </body>
</html>
#+END_SRC

#+BEGIN_NOTES
Here's a more complicated example that introduces some new elements
and best practices.

The first thing to notice is the indentation. HTML does not require
you to do this -- the browser will ignore it. However, as you can see
it makes the nested structure of the document very easy to see, to so
it is very good practice to get in to.

From now on, you should make sure that all of the HTML that you write
has correct indentation. I do that be indenting by two spaces for
each new block level element.

Lets look at this line by line.

The first line specifies the *document type*. This looks a little bit
like an element, but it isn't. Back when HTML was first being
developed the idea was that there might be lots of different document
types, and this line would tell the browser what type it was and what
rules to follow. That never really worked out, so now you just need to
include this one.

Note that the second character is an exclamation mark.

The second line is the opening tag for the =html= element. This element
should contain all the content on the page. You will also hear this
called the root element.

The =html= element should contain two child elements. The next line
introduces the first of these, =head=. This element is used to contain
various bits of additional information -- we call it *metadata* about
the page.

Here, the =head= contains a =title= element, with some text content.

Can anyone tell me where you would normally see the title appear in the
browser?

[wait for answer]

Places you'll see the contents of the =title= used include:

- In the tab for the page in the browser
- The default name for the page's bookmark
- In a search engine result page

Moving down the page, we close the =head= element, and open a new
=body= element. The =body= should contain *all* the content that you
want to show to the user, whether that's text, images, videos, or
whatever else.

We start the body with an =h1= element. This is a *Level 1 heading*,
and we talk more about those later.

Then we have a =p= element, exactly as we have already seen.

Finaly, we need to close the open =body= and =html= elements.
It's important to do those in the right order.

Now replace the contents of your =scratch/index.html= page with this,
save, and reload.

[Wait]

#+END_NOTES

** Results

#+BEGIN_SRC html-chrome :noweb yes :exports results
<<a-more-complicated-example>>
#+END_SRC

#+RESULTS:
[[file:results.png]]

** Exercise: Break it

1. Mis-spell =<h1>= as =<h>=
2. Mis-spell =</h1>= as =</h>=
3. Delete the =</p>=
4. Delete the blank spaces before the =<p>=

#+BEGIN_NOTES
It's common to occasionally make errors when typing in HTML, so I want
you to see what the effect of some of those errors is so that you can
recognise them in the future.

For each of the four exercises here make the change, save, and reload
the file. Write down what seems to be different, and then undo the
change so the file is correct, before moving on the next change.

Let me know when you've all done this.

[Wait]
#+END_NOTES

** Solution: Break it

#+REVEAL_HTML: <div class="leftcol">
1. Mis-spell =<h1>= as =<h>=

#+NAME: break-it-1
#+BEGIN_SRC html-chrome
<h>This is a heading</h1>

<p>This is a single paragraph</p>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: break-it-1
[[file:break-it-1.png]]
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
Because =h= is not a valid HTML element the browser didn't know what
to do with the text. So it plays it safe, and displays it like
regular text.

By the way, in these and future examples I'm going to leave out
the =html=, =head=, and =body= elements to make space on the slides.
You have to assume that they're there.
#+END_NOTES

** Solution: Break it

#+REVEAL_HTML: <div class="leftcol">
2. Mis-spell =</h1>= as =</h>=

#+NAME: break-it-2
#+BEGIN_SRC html-chrome
<h1>This is a heading</h>

<p>This is a single paragraph</p>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: break-it-2
[[file:break-it-2.png]]
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
This time the closing tag is wrong, and doesn't close the opening
tag. The browser decided that the =h1= element stays open, and places
the =p= element *inside* the heading.

This is why the paragraph text looks the same as the heading.
#+END_NOTES

** Solution: Break it

#+REVEAL_HTML: <div class="leftcol">
3. Delete the =</p>=

#+NAME: break-it-3
#+BEGIN_SRC html-chrome
<h1>This is a heading</h1>

<p>This is a single paragraph
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: break-it-3
[[file:break-it-3.png]]
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
In this case it doesn't look any different. We got lucky because
of where the breakage is. The browser knows that there can be
no more content after the closing =</body>= tag, so it acts as
though any tags that are still open at that point are closed.

Although the results look the same this is still bad HTML.
#+END_NOTES

** Solution: Break it

#+REVEAL_HTML: <div class="leftcol">
4. Delete the blank spaces before the =<p>=

#+NAME: break-it-4
#+BEGIN_SRC html-chrome
<html>
  <body>
    <h1>This is a heading</h1>

<p>This is a single paragraph</p>
  </body>
</html>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: break-it-4
[[file:break-it-4.png]]
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
Again, it doesn't look any different. This because this is not
bad HTML.

Browsers completely ignore any whitespace *outside* HTML elements.
We saw this earlier too with the *block* vs. *inline* display example.
#+END_NOTES

** Adding checks to Atom

- =File= > =Settings=
- =+ Install=
- Search for =htmlhint= (by =tcarlsen=)
- Click =Install=
- In =Settings=, click =Validate On Change=

#+BEGIN_NOTES
We can install a helper in to Atom to spot these sorts of mistakes
for us, and warn them when they happen. This makes writing HTML,
and other languages, much more pleasant -- we let the computers do
the tedious work for us.

To do so,

[Demo]
#+END_NOTES
** Adding images

#+BEGIN_SRC html
<img src="name-of-file" alt="Image of ...">
#+END_SRC

#+BEGIN_NOTES
To add an image to a page we use the =img= element.

Remember earlier when I said that teaching is all about lying
to students? This is one of those times.

Earlier I said that all elements have a start tag, content, and an end
tag.

Some elements are what we call empty elements. They have no content,
and no end tag. So to write them you just use the start tag. And =img=
is one of those elements.

The =img= element also has *attributes*.

These are written inside the start tag as the name of the attribute,
then an equals sign, and then the value, enclosed in quotes.

*Important*: These should be together -- no spaces on either side of
equals sign.

Two of the attributes the =img= element supports are =src= and =alt=.

Use =src= to specify the filename of the image to load.

Use =alt= to specify some text that should be displayed or used if the
image can not be loaded or is not useful to the user. For example,
it's possible for blind or partially sighted people to get *screen
readers* that read the contents of the page to them. In this case
the contents of the =alt= attribute is read to the user.
#+END_NOTES

*** Download an image

1. Go to https://powercoders.org
2. Right-click the Powercoders logo at the top of the page
3. Choose =Save image as= in the menu
4. Save to your =scratch= directory
  - Should be called =powercoders-logo-CMYK.svg=

*** Update your scratch file

#+NAME: example-with-image
#+BEGIN_SRC html -n
<!DOCTYPE html>
<html>
  <head>
    <title>My test page</title>
  </head>

  <body>
    <h1>This is a heading</h1>

    <p>This is a single paragraph.</p>

    <p><img src="powercoders-logo-CMYK.svg" alt="Powercoders"></p>
  </body>
</html>
#+END_SRC

#+BEGIN_NOTES
Add the =img= element below the =p= element, exactly as shown here.

Save, and reload the page in the browser.
#+END_NOTES

*** An image on the page

#+BEGIN_SRC html-chrome :noweb yes :exports results :flags --window-size=640x240 --force-device-scale-factor=2
<<example-with-image>>
#+END_SRC

#+RESULTS:
[[file:an-image-on-the-page.png]]

#+BEGIN_NOTES
Question: Is =img= a block-level element or an inline element? Try
it, and tell me.

[Wait for them to say]

=img= is an inline element -- it must be wrapped (or nested) inside
a block level element.
#+END_NOTES

*** Exercise: Break it

1. Mis-spell =src= as =source=
2. Leave off a double-quote ="=
3. Mis-spell the filename

#+BEGIN_NOTES
Here are more things for you to try and do to break the page. I want
you to try each one of these things, and see what happens.

For each one, break it, note what happens, then fix it and make sure
the page displays OK after you fix it. Then move on to the next one.

[Wait]

[Discussion of the problems]

1. Atom didn't tell you there was a mistake. This is because Atom is
lenient, and assumes there might be some attributes that it doesn't
know about.

The lesson here is -- just because Atom says it's OK doesn't mean
it necessarily is. You still need to check.

2. The missing quote depends on which one is missing. If it's one
of the ones from the =src= attribute then the file will not be found.

If it's one of the ones from the =alt= attribute then the page should
still look like you expect, but the =alt= attribute value will not
work properly.

3. If you mis-spell the filename then the image won't be found.
#+END_NOTES

*** Types of images

- PNG (Portable Network Graphics), =.png=
  - Raster format
  - Lossless compression
  - Best for images with text, line-art, flat colours
- JPEG (Joint Photographic Expert Group), =.jpeg=, =.jpg=
  - Raster format
  - Lossy compression
  - Good for photos
- SVG (Scalable Vector Graphics), =.svg=
  - Vector format
  - Supports interactivity and animation

#+BEGIN_NOTES
There are typically three image formats that you will encounter on the
web.

PNG and JPEG images are both examples of raster, or bitmap images.
The files contain information that describes, for each pixel of
the image, what colour and transparency the pixel has.

Both formats are *compressed*, meaning that an image takes up a lot
less space to transmit than the underlying raw image data is.

They do this compression in different ways. PNG uses *lossless*
compression. This means that if you take an image, convert it to
PNG, and then display it again you get exactly the same pixel colours
and transparency as the original image.

This makes it useful for drawings, images with lots of flat colours,
and so on.

JPEG uses *lossy* compression. Once you have converted an image to
JPEG some of the image data has been discarded. This makes the
file significantly smaller. JPEG is designed so that the data that
is thrown away normally doesn't affect the image in ways that we
can perceive, but this works best with images that are photos or
contain a lot of other detail. For other types of images this can
result in visible *artifacts*.

Unlike the other two, SVG describes the image, with information
like "Draw a line from *here* to *there*, or place a circle here,
make it red, and the outline blue.

Because of this SVG images can be made larger without becoming
blurry. They also support interactivity (such as being able to
react to clicking on different parts of the image) and animation.

SVG is best used for logos, technical drawings, and the like.

The Powercoders logo file that we downloaded was an SVG image.
#+END_NOTES

** Element content and attribute content

#+BEGIN_SRC html
<!-- This does *not* work -->

<img>
  <src>name-of-file.png</src>
  <alt>Image of ...</alt>
</img>
#+END_SRC

#+BEGIN_NOTES
You might be wondering why images are empty elements with attributes?
Couldn't they be a nested element, with other elements to specify the
image file and the alternative content?

That's a great question. The answer is that, generally, element content
represents something that the user will immediately see on the page, while
attributes are used to specify how that content should be displayed, or
other information that would normally be hidden.

This is not a hard and fast rule. When HTML was first being developed
rules like this didn't really exist, and so the language is not completely
consistent about how these things are treated. It's just something you
have to get used to.

By the way, that weird element at the top with an exclamation mark and
the minus signs. That's what a comment looks like in HTML. We'll talk
more about that later.
#+END_NOTES

** Different elements have different attributes

#+BEGIN_SRC html
<!-- This does *not* work -->

<p src="name-of-file.png">...</p>
#+END_SRC

#+BEGIN_NOTES
The HTML specification says which attributes are allowed for each
element, you can't just write an attribute on an element and hope it
will work.

So this example here does not work.

We'll be seeing many more attributes as we go through the course.
#+END_NOTES

** TODO Heading levels

#+REVEAL_HTML: <div class="leftcol">
#+NAME: html-headings
#+BEGIN_SRC html-chrome :flags --window-size=300,300 --force-device-scale-factor=2
  <h1>Level 1 heading</h1>

  <h2>Level 2 heading</h2>

  <h3>Level 3 heading</h3>

  <h4>Level 4 heading</h4>

  <h5>Level 5 heading</h5>

  <h6>Level 6 heading</h6>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: html-headings
[[file:html-headings.png]]
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
You may have guessed that the =h1= element was just one of many
different heading elemnts.

If so, you're right. There are six of them. =h1= is the largest,
to =h6= which is the smallest.
#+END_NOTES

** TODO Unordered lists

#+NAME: html-ul
#+BEGIN_SRC html
  <p>The unordered list uses bullet points.</p>

  <ul>
    <li>This is a list item.</li>

    <li>So is this.
      <ul>
	<li>Lists can be nested inside each other.</li>

	<li>And have more list items.</li>
      </ul>
    </li>
  </ul>
#+END_SRC

** TODO Unordered lists

#+REVEAL_HTML: <div class="leftcol">
#+NAME: html-ul-results
#+BEGIN_SRC html-chrome :noweb yes
<<html-ul>>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: html-ul-results
[[file:html-ul-results.png]]
#+REVEAL_HTML: </div>

** TODO Ordered lists

#+NAME: html-ol
#+BEGIN_SRC html
  <p>The ordered list uses numbers.</p>

  <ol>
    <li>This is a list item.</li>

    <li>So is this.
      <ol>
	<li>Lists can be nested inside each other.</li>

	<li>And have more list items.</li>
      </ol>
    </li>
  </ol>
#+END_SRC

** TODO Ordered lists

#+REVEAL_HTML: <div class="leftcol">
#+NAME: html-ol-results
#+BEGIN_SRC html-chrome :noweb yes
<<html-ol>>
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
#+RESULTS: html-ol-results
[[file:html-ol-results.png]]
#+REVEAL_HTML: </div>

#+RESULTS:
** MDN and exercises

- Mozilla Developer Network (MDN)
- https://developer.mozilla.org/en-US/docs/Web/HTML/Element
- Search for "mdn html elements"

#+BEGIN_NOTES
Mozilla is the organization responsible for, amongst other things,
the Firefox web browser, and the provide a very comprehensive set of
reference documents and tutorials online.

As a programmer you'll need to get used to reading and understanding
technical documentation, so for the rest of the afternoon you'll be
using the MDN documentation to learn about more HTML elements and add
them to your scratch page.
#+END_NOTES


* Exercises

#+REVEAL_HTML: <div class="leftcol">
- Add more headings, =h1=, =h2=, etc
- Add more paragraphs, =p=
- Add an ordered list, =ol=
- Add an unordered list, =ul=
- Add images
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="rightcol">
- =div=
- =span=
- Mark up the recipe
- Start a notes / cheatsheet document
- Start a portfolio
#+REVEAL_HTML: </div>
